const express = require('express');
const mysql = require('sql.js');
const xl = require('excel4node');
const nodemailer = require('nodemailer');
const fs = require('fs');
const AdmZip = require('adm-zip');
const format = require('string-format-js');

const router = express.Router();
const connection = require('../database/db');

router.get('/:id', (req, res, next) => {

  const queryStr = "SELECT * FROM verifications_archive WHERE `id_–¥–ª—è_—Å—Ç–∞–Ω—Ü—ñ—ó`= " + req.params.id + ";";

  connection.query(queryStr, (err, result) => {
    if (err) {
      console.log(err);
    }
    generateFiles(result);

    // creating archives
    const zip = new AdmZip();

    zip.addLocalFile("./backend/data/Database.db");
    zip.addLocalFile("./backend/data/Excel.xlsx");
    zip.writeZip("./backend/data/task.zip");

    res.status(200);
  });
});

function generateFiles(taskResult) {
  const db = new mysql.Database();
  const sqlString =
    "CREATE TABLE Subscribers(id_pc INT, surname TEXT, name TEXT, middlename TEXT, city TEXT, district TEXT," +
    " bush TEXT, street TEXT, Building TEXT, Apartment TEXT, Tel TEXT, Date_visit TEXT, Counter_number TEXT," +
    " Note TEXT, Customer TEXT);";
  db.run(sqlString);

  taskResult.forEach(task => {
    let varData = " VALUES ('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s');";
    let formatedData = varData.format(task.–ù–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏,
      task.–ö–ª—ñ—î–Ω—Ç.split(' ')[0], task.–ö–ª—ñ—î–Ω—Ç.split(' ')[1], task.–ö–ª—ñ—î–Ω—Ç.split(' ')[2],
      task.–ù–∞—Å–µ–ª–µ–Ω–∏–π_–ø—É–Ω–∫—Ç, null, null, task.–í—É–ª–∏—Ü—è_–∫–ª—ñ—î–Ω—Ç–∞, task.–ë—É–¥–∏–Ω–æ–∫, task.–ö–≤–∞—Ä—Ç–∏—Ä–∞,
      task.–ù–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω—É, task.–î–∞—Ç–∞_–∑–∞–≤–¥–∞–Ω–Ω—è, task.–ù–æ–º–µ—Ä_–ª—ñ—á–∏–ª—å–Ω–∏–∫–∞, task.–ü—Ä–∏–º—ñ—Ç–∫–∞, task.–ù–∞–¥–∞–≤–∞—á_–ø–æ—Å–ª—É–≥);
    let sqlStr = "INSERT INTO Subscribers(id_pc, surname, name, middlename, city, district," +
      " bush, street, Building, Apartment, Tel, Date_visit, Counter_number, " +
      " Note, Customer)" + formatedData;
    db.run(sqlStr);
  });

  const databaseArray = db.export();

  fs.writeFile('./backend/data/Database.db', databaseArray, (err) => {
    if (err) throw err;
    console.log('–§–∞–π–ª Database.db —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ');
  });

  generateExcelFile(taskResult);


  // generateMail();
}

// –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –ª–∏—Å—Ç–∞
function generateMail() {
  nodemailer.createTestAccount((err, account) => {

    let transporter = nodemailer.createTransport({
      host: 'smtp.gmail.com',
      port: 465,
      secure: true, // true for 465, false for other ports
      auth: {
        user: 'dantetheslayer18@gmail.com', // generated ethereal user
        pass: 'Fuck1This2Shit3' // generated ethereal password
      }
    });

    let mailOptions = {
      from: '"Fred Foo üëª" <foo@example.com>', // sender address
      to: 'dantetheslayer18@gmail.com', // list of receivers
      subject: 'Hello ‚úî', // Subject line
      text: 'Hello world?', // plain text body
      html: '<b>Hello world?</b>', // html body
      attachments: [{ // filename and content type is derived from path
        path: './backend/data/task.zip'
      }]
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        return console.log(error);
      }
      console.log('Message sent: %s', info.messageId);
      // Preview only available when sending through an Ethereal account
      console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));
    });
  });
}

// –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–∞–±–∏–ª—Ü—ñ Excel
function generateExcelFile(taskResult) {
  const wb = new xl.Workbook();

  // –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
  let headers = wb.createStyle({
    font: {
      bold: true,
    },
    border: {
      left: {
        style: 'medium',
        color: '#000000',
      },
      right: {
        style: 'medium',
        color: '#000000',
      },
      top: {
        style: 'medium',
        color: '#000000',
      },
      bottom: {
        style: 'medium',
        color: '#000000',
      },
    }
  });

  // –°—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç—É
  let text = wb.createStyle({
    
  });

  let ws = wb.addWorksheet('–ó–∞–≤–¥–∞–Ω–Ω—è');

  // –®–∏—Ä–∏–Ω–∞ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
  ws.column(1).setWidth(16);
  ws.column(2).setWidth(22);
  ws.column(3).setWidth(10);
  ws.column(4).setWidth(21);
  ws.column(5).setWidth(11);
  ws.column(6).setWidth(11);
  ws.column(7).setWidth(11);
  ws.column(8).setWidth(11);
  ws.column(9).setWidth(24);
  ws.column(10).setWidth(32);
  ws.column(11).setWidth(12);
  ws.column(12).setWidth(14);
  ws.column(13).setWidth(17);
  ws.column(14).setWidth(72);
  ws.column(15).setWidth(11);

  ws.cell(1, 1).string('–î–∞—Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è').style(headers);
  ws.cell(1, 2).string('–ù–∞–¥–∞–≤–∞—á –ø–æ—Å–ª—É–≥').style(headers);
  ws.cell(1, 3).string('–†–∞–π–æ–Ω').style(headers);
  ws.cell(1, 4).string('–í—É–ª–∏—Ü—è').style(headers);
  ws.cell(1, 5).string('–ë—É–¥–∏–Ω–æ–∫').style(headers);
  ws.cell(1, 6).string('–ö–≤–∞—Ä—Ç–∏—Ä–∞').style(headers);
  ws.cell(1, 7).string('–ü—ñ–¥\'—ó–∑–¥').style(headers);
  ws.cell(1, 8).string('–ü–æ–≤–µ—Ä—Ö').style(headers);
  ws.cell(1, 9).string('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤').style(headers);
  ws.cell(1, 10).string('–ü–Ü–ë').style(headers);
  ws.cell(1, 11).string('–¢–µ–ª–µ—Ñ–æ–Ω').style(headers);
  ws.cell(1, 12).string('–ë–∞–∂–∞–Ω–∏–π —á–∞—Å').style(headers);
  ws.cell(1, 13).string('–ù–æ–º–µ—Ä –ø–æ–≤—ñ—Ä–∫–∏').style(headers);
  ws.cell(1, 14).string('–ü—Ä–∏–º—ñ—Ç–∫–∞').style(headers);
  ws.cell(1, 15).string('–ö–æ–º–µ–Ω—Ç–∞—Ä').style(headers);

	let i = 2;
  taskResult.forEach(task => {
		ws.cell(i, 1).string(task.–î–∞—Ç–∞_–Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è).style(text);
		ws.cell(i, 2).string(task.–ù–∞–¥–∞–≤–∞—á_–ø–æ—Å–ª—É–≥).style(text);
		ws.cell(i, 3).string(' ').style(text);
		ws.cell(i, 4).string(task.–í—É–ª–∏—Ü—è_–∫–ª—ñ—î–Ω—Ç–∞).style(text);
		ws.cell(i, 5).string(task.–ë—É–¥–∏–Ω–æ–∫).style(text);
		ws.cell(i, 6).string(task.–ö–≤–∞—Ä—Ç–∏—Ä–∞).style(text);
		ws.cell(i, 7).string(' ').style(text);
		ws.cell(i, 8).string(' ').style(text);
		ws.cell(i, 9).string(' ').style(text);
		ws.cell(i, 10).string(task.–ö–ª—ñ—î–Ω—Ç).style(text);
		ws.cell(i, 11).string(task.–ù–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω—É).style(text);
		ws.cell(i, 12).string(task.–î–∞—Ç–∞_–∑–∞–≤–¥–∞–Ω–Ω—è).style(text);
		ws.cell(i, 13).string(task.–ù–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏).style(text);
		ws.cell(i, 14).string(task.–ü—Ä–∏–º—ñ—Ç–∫–∞).style(text);
		ws.cell(i, 15).string(task.–ö–æ–º–µ–Ω—Ç–∞—Ä).style(text);

    i++;
  });

  wb.write('./backend/data/Excel.xlsx');
  console.log('Excel –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!');
}

module.exports = router;
